Cycle Detection In Undirected Graph
=====================================================================================================================================
//Problem Link  =========> https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

=====================================================================================================================================

//Problem Statement :
  
Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1

Explanation: 
1->2->3->4->1 is a cycle.


Example 2:
Input: 
V = 4, E = 2
adj = {{}, {2}, {1, 3}, {2}}
Output: 0

Explanation: 
No cycle in the graph.


=====================================================================================================================================

//CODE —————> TC :  o(N + E)  ;    SC : o(N)
This Code is  work in GFG

class Solution {
    
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[] = new boolean[V];
        
        for(int i = 0; i < V; i++){
            if(!vis[i] ){
                if((dfs(i, -1 , adj, vis)) == true) return true;
            }
        }
        
        return false;
        
    }
    public boolean dfs(int node, int parent, ArrayList<ArrayList<Integer>> adj, boolean vis[]){
        vis[node] = true; // mark as visited
        
        
        for(int adjNodes : adj.get(node)){
            if(vis[adjNodes] == false){
                if(dfs(adjNodes, node, adj, vis) == true) return true;
                
            }
            else if(adjNodes != parent) return true;
        }
        
        return false;
    }
}


=====================================================================================================================================
//CODE —————> TC :  o(N + E)  ;    SC : o(N)
This Code is  work in CODING NINJAS   ( https://www.codingninjas.com/studio/problems/1062670 )

import java.util.ArrayList;
public class Solution {
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        ArrayList<ArrayList<Integer>>adj = new ArrayList<>();
        
        for(int i = 0; i <= n; i++){
            adj.add( new ArrayList<Integer>());
        }

        for(int i = 0; i < edges.length ; i++){
            int s = edges[i][0];
            int d = edges[i][1];
            
            adj.get(s).add(d);
            adj.get(d).add(s);
        }

        ArrayList<Boolean>vis = new ArrayList<>();

        for(int i = 0; i <= n; i++){
            vis.add(false);
        }
        
        for(int i = 1; i <= n ; i++){
            if(vis.get(i) == false){
                if(dfs(i , -1, adj, vis) == true){
                    return "Yes";
                }
            }
        }
        
        return "No";
    }
    
    public static boolean dfs(int node , int parent, ArrayList<ArrayList<Integer>>adj, ArrayList<Boolean>vis ){
        vis.set(node, true) ;

        for(int adjNodes : adj.get(node)){
            if(vis.get(adjNodes) == false){
                if(dfs(adjNodes, node , adj, vis) == true) return true;
            }
            else if(adjNodes != parent){
                return true;
            }
        }


        return false;
    }
    
}


=====================================================================================================================================
