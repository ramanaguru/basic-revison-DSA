Is Graph Bipartite(Leetcode 785)
=====================================================================================================================================
//Problem Link  =========> https://leetcode.com/problems/is-graph-bipartite/description/

=====================================================================================================================================

//Problem Statement :
  
There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

 

Example 1:

Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false

Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.

Example 2:

Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true

Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.


=====================================================================================================================================

//CODE —————> TC :  O(V + E) O(V + 2E), Where V = Vertices, 2E is for total degrees as we traverse all adjacent nodes
              SC : O(V )               O(3V) ~ O(V), Space for DFS stack space, colour array and an adjacency list.




class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int col[] = new int[n+1];

        Arrays.fill(col, -1);

        for(int i = 0; i < n; i++){
            if(col[i] == -1){
                if(bfs(i, col, graph) == false){
                    return false;
                }
            }
        }

        return true;
    }

    public boolean  bfs(int start, int color[] , int[][]graph){
        Queue<Integer>q = new LinkedList();
        q.add(start);
        color[start] = 0;
        while(q.size() > 0){
            int node = q.poll();

            for (int j = 0; j < graph[node].length; j++) {
                int v = graph[node][j];  //adjacentNode
                if (color[v] == -1) {
                    color[v] = 1 - color[node];
                    q.add(v);
                } else if (color[v] == color[node]) {
                    return false;
                }
            }
        }

        return true;
    }
}


=====================================================================================================================================
