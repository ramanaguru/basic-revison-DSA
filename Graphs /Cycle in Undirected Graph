Cycle in Undirected Graph
=====================================================================================================================================
Problem Description

Given an undirected graph having A nodes labelled from 1 to A with M edges given in a form of matrix B of size M x 2 where (B[i][0], B[i][1]) represents two nodes B[i][0] and B[i][1] connected by an edge.
Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.

NOTE:
The cycle must contain atleast three nodes.
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.


Input 1:

 A = 5
 B = [  [1. 2]
        [1, 3]
        [2, 3]
        [1, 4]
        [4, 5]
     ]

Input 2:

 A = 3
 B = [  [1. 2]
        [1, 3]
     ]




Output 1: 1 (hasCYCLE) // There is a cycle in the graph i.e 1 -> 2 -> 3 -> 1 so we will return 1

Output 2: 0 (NoCYCLE) //  No cycle present in the graph so we will return 0.




=====================================================================================================================================
//CODE —————> TC :  o(N + E)  ;    SC : o(N + E)


public class Solution {
    public int solve(int A, int[][] B) {
        
        ArrayList<Integer>adj[] = new ArrayList[A+1];

        for(int i = 0; i < adj.length; i++){
            adj[i] = new ArrayList();
        }

        for(int i = 0; i < B.length; i++){
            int s = B[i][0];
            int d = B[i][1];
            adj[s].add(d);
            adj[d].add(s);
        }

        boolean vis[] = new boolean[A + 1];
        int count = 0; //count number of components

        for(int i = 1; i <= A; i++){
            if(vis[i] == false){
                count++;
                dfs(adj, vis, i);
            }
        }

        if(A - count == B.length) return 0; // No. of node - no. of components = no cycle detect
        else return 1;



    } 

    public void dfs( ArrayList<Integer>adj[] , boolean vis[], int source){

        if(vis[source] == true) return;
        vis[source] = true;

        for(int i = 0; i < adj[source].size(); i++){
            int v = adj[source].get(i);
            if(vis[v] == false){
                dfs(adj, vis, v);
            }
        }
    }
}

=====================================================================================================================================
