 Path in Directed Graph

Problem Description
Given an directed graph having A nodes labelled from 1 to A containing M edges given by matrix B of size M x 2such that there is a edge directed from node
B[i][0] to node B[i][1]. Find whether a path exists from node 1 to node A.
Return 1 if path exists else return 0.

NOTE:

There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.


Example Input
Input 1:

 A = 5
 B = [  [1, 2] 
        [4, 1] 
        [2, 4] 
        [3, 4] 
        [5, 2] 
        [1, 3] ]
Input 2:

 A = 5
 B = [  [1, 2]
        [2, 3] 
        [3, 4] 
        [4, 5] ]


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation

Explanation 1:
The given doens't contain any path from node 1 to node 5 so we will return 0.

Explanation 2:
Path from node1 to node 5 is ( 1 -> 2 -> 3 -> 4 -> 5 ) so we will return 1.




====================================================================================================================================================================================================================


//CODE —————> TC :  o(N + E ) // The time complexity of BFS algorithm is O(V+E), since in the worst case, BFS algorithm explores every node and edge. In a graph, the number of vertices is O(V), whereas the number of edges is O(E).
              SC :  o(N + E)


public class Solution {
    public int solve(int A, int[][] B) {

        ArrayList<Integer>[]adj = new ArrayList[A + 1];


        for(int i = 1; i <= A;i ++){
            adj[i]= new ArrayList();
        }

        for(int i = 0; i < B.length; i++){
            int s = B[i][0];
            int d = B[i][1];
            adj[s].add(d);
        }

        boolean vis[] = new boolean[A + 1];
        vis[1] = true;
        Queue<Integer>q = new LinkedList();
        q.add(1);

        while(q.size() > 0){
            int u = q.poll();

            if(u == A) return 1;

            for(int i = 0; i < adj[u].size(); i++){
                int v = adj[u].get(i);
                if(vis[v] == false){
                    vis[v] = true;
                    q.add(v);
                }
            }
        }

        return 0;
    }
}


=====================================================================================================================================
