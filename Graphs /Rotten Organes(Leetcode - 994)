Rotten Organes(Leetcode - 994)
=====================================================================================================================================
//Problem Link  =========> https://leetcode.com/problems/rotting-oranges/description/
=====================================================================================================================================

//Problem Statement :


You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
   

=====================================================================================================================================


    Steps I followed
    Used MultiSource BFS
    We need push all rotten organes first
    No need of adjacent lists because we can calculate  all Adjaacent nodes
    Given matrix itself we marked it as rotten
    from observation we came to know count the no of levels to get time


=====================================================================================================================================


//CODE —————> TC :  o(N*M)  ;    SC : o(N*M)

class Solution {
    class Pair{
        int first; // i
        int second;// j
        public  Pair(int x, int y){
            this.first = x;
            this.second = y;
        }

    }
  
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        int freshcount = 0;

        Queue<Pair>q = new LinkedList<>();
        for(int i = 0 ; i < n; i++){
            for(int j = 0; j < m;j++){
                if(grid[i][j]==1) freshcount++;  
                if(grid[i][j] == 2){                 // if its rotten we add to queue
                    q.add(new Pair(i, j));
                }
            }
        }

        if(q.isEmpty()){
            if(freshcount == 0 ) return 0;
            else return -1;
        } 

        int total = 0; // from observation we know total - 1 will be our output

        while(!q.isEmpty()){
            total++;
            int size = q.size();

            for(int i = 0 ; i < size; i++){
                Pair ele = q.poll();
                int x = ele.first;
                int y = ele.second;

                //qn states -->  4-directionally adjacent to a rotten orange becomes rotten.
                if(x-1>= 0 && grid[x-1][y] == 1){
                    grid[x-1][y] = 2;
                    q.add(new Pair(x-1, y));
                    
                }
                if(x + 1 < n && grid[x+1][y] == 1){
                    grid[x+1][y] = 2;
                    q.add(new Pair(x+1, y));
                }
                if(y - 1 >= 0 && grid[x][y-1] == 1){
                    grid[x][y-1] = 2;
                    q.add(new Pair(x, y-1));
                }
                if(y + 1 < m && grid[x][y+1] == 1){
                    grid[x][y+1] = 2;
                    q.add(new Pair(x, y+1));
                }
                
            }
        }

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 1) return -1;
            }
        }

        return total - 1;
        
    }
}



=====================================================================================================================================
