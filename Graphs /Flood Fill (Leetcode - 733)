Flood Fill (Leetcode - 733)
=====================================================================================================================================
//Problem Link  =========>   https://leetcode.com/problems/flood-fill/

=====================================================================================================================================

//Problem Statement :

An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.
You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].
To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), 
and so on. Replace the color of all of the aforementioned pixels with color.
Return the modified image after performing the flood fill.


For Examples : please check the link

   

=====================================================================================================================================

//CODE —————> 
Time Complexity: O(NxM + NxMx4) ~ O(N x M)
For the worst case, all of the pixels will have the same colour, so DFS function will be called for (N x M) nodes and for every node we are traversing for 4 neighbours, so it will take O(N x M x 4) time.


Space Complexity: O(N x M) + O(N x M)
O(N x M) for copied input array and recursive stack space takes up N x M locations at max. 
=====================================================================================================================================

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int initial = image[sr][sc];
        int ans[][] = image;

        int dr[]= {-1, 0 , +1, 0} ;
        int dc[] ={0 , +1 , 0 ,-1};


        dfs(image , sr , sc , color , initial , dr, dc, ans ) ;

        return ans;
    }
    public void dfs(int image[][] , int row , int col ,int newColor, int initial, int dr[], int dc[] ,int ans[][]){
        ans[row][col] = newColor;
        int n = image.length;
        int m = image[0].length;

        for(int i = 0; i <4; i++){
            int nrow =  row  + dr[i];
            int ncol =  col  + dc[i];

            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && image[nrow][ncol] == initial && ans[nrow][ncol] != newColor){
                dfs(image , nrow, ncol, newColor, initial , dr, dc, ans);
            }

        }
    }
}


=====================================================================================================================================

