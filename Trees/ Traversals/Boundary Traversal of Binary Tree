Boundary Traversal of Binary Tree 
=====================================================================================================================================
//Problem Link  =========>   https://www.codingninjas.com/codestudio/problems/boundary-traversal_790725

=====================================================================================================================================

//Problem Statement :

Given a binary tree, return the values of its boundary in anti-clockwise direction starting from the root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.


Input 1:
               _____1_____
              /           \
             2             3
            / \            / 
           4   5          6   
              / \        / \
             7   8      9  10  
             
Output 1:
    [1, 2, 4, 7, 8, 9, 10, 6, 3]
    
    Explanation 1:
        The left boundary are node 1,2,4. (4 is the left-most node according to definition)
        The leaves are node 4,7,8,9,10.
        The right boundary are node 1,3,6,10. (10 is the right-most node).
        So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].

Input 2:
                1
               / \
              2   3
             / \  / \
            4   5 6  7
            
Output 2:
     [1, 2, 4, 5, 6, 7, 3] 
        

=====================================================================================================================================

Approach: Boundary traversal in an anti-clockwise direction can be described as a traversal consisting of three parts:

Part 1: Left Boundary of the tree (excluding the leaf nodes).
Part 2: All the leaf nodes travelled in the left to right direction.
Part 3: Right Boundary of the tree (excluding the leaf nodes), traversed in the reverse direction.

=====================================================================================================================================


=====================================================================================================================================

//CODE —————> TC :  o(N)  ;    SC : o(N)       // SC is O(Height of tree)


import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode A){
		ArrayList<Integer>result = new ArrayList<>();

        result.add(A.data);

        traverseLeft(A.left, result);

        traverseLeaves(A.left, result); // if left  leaves present

        traverseLeaves(A.right, result); // if right leaves present

        traverseRight(A.right, result);


        return result;

	}
	public static void traverseLeft(TreeNode A , ArrayList<Integer>result){
        if(A == null || (A.left == null && A.right == null)) return;
        result.add(A.data);
        if(A.left != null){
            traverseLeft(A.left,  result);
        }
        else{
            traverseLeft(A.right, result);
        }
    }

    public static void traverseRight(TreeNode A , ArrayList<Integer>result){
        if(A == null || (A.left == null && A.right == null)) return;
        
        if(A.right != null){
            traverseRight(A.right, result);
        }
        else{
            traverseRight(A.left, result);
        }
        
        result.add(A.data);
    }

    public static void traverseLeaves(TreeNode A , ArrayList<Integer>result){
        if(A == null) return;

        traverseLeaves(A.left, result);

        if(A.left == null && A.right == null){
            result.add(A.data);
        }
        
        traverseLeaves(A.right,result);
    }
}


=====================================================================================================================================
