Level Order Traversal (Leetcode 102)
=====================================================================================================================================
//Problem Link  =========>  https://leetcode.com/problems/binary-tree-level-order-traversal/

=====================================================================================================================================

//Problem Statement :
  
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []   

=====================================================================================================================================

//CODE —————> TC :  o(N)  ;    SC : o(N)



class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //Level Order Traversal ==> Remember to use Queue structure
        List<List<Integer>> ans =  new ArrayList();
        if(root == null) return ans;

        Queue<TreeNode>q = new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()){
            List<Integer>level = new ArrayList<>();
            int n = q.size();

            for(int i = 0 ; i < n; i++){
                TreeNode node = q.poll();
                level.add(node.val);

                if(node.left != null){
                    q.add(node.left);
                }
                if(node.right != null){
                    q.add(node.right);
                }
            }

            ans.add(level);
            
            
        }

        return ans;
    
    }
}

=====================================================================================================================================
