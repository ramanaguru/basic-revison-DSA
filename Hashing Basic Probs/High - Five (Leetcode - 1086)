LeetCode - 1086 ===> Premium Question
Free Question Link : https://leetcode.ca/all/1086.html

//Problem Statement :

Given a list of scores of different students, return the average score of each student's top five scores
in the order of each student's id.
Each entry items[i] has items[i][0] the student's id, and items[i][1] the student's score.
The average score is calculated using integer division.


Example 1:

Input   => items: [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output  =>o/p   : [[1,87],[2,88]]

Explanation:
The average of the student with id = 1 is 87.
The average of the student with id = 2 is 88.6. But with integer division their average converts to 88.


//CODE
TC =====> O() ;   SC : O()

Why TREEMAP         ==> Because it internally sort the KEY
WHY PRIORITY QUEUE  ==> To maintain the 5 top scores atlast as question states // {USING MAX_HEAP}

class Solution{
    public int[][]highFive(int items[][]){
        Map< Integer, PriorityQueue<Integer> > map = new TreeMap<>();

        /*we are putting in our map if ID IS NOT PRESENT FOR FIRST TYM, ADD THAT ID AND STORE THE SCORE
         Like this   MAP< 1 , (91) > //MAXHEAP
                     MAP< 2 , (93) >
        */

        for(int item[] : items){
            int id      = item[0];
            int score   = item[1];
            if(!map.containsKey(id) ){

                map.put(id , new PriorityQueue<>( (a,b) -> b-a));
            }

            /* REST Iterations
                MAP< 1 , (100,92,91,87,65,60) >
                MAP< 2 , (100,97,93,77, 76)>
            */

            map.get(id).add(score);
        }

        List<int[]> ans = new ArrayList<>();

        for(int id  : map.keySet() ){
            int sum = 0;

            for(int i = 0; i < 5; i++){
                    sum = sum + map.get(id).poll(); // calculate the total sum
            }

            ans.add(new int[]{id, sum/5});
        }

        int[][] ansArray = new int[ans.size()][];

        return ans.toArray(ansArray);

    }
}
