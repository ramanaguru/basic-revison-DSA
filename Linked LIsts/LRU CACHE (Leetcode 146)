LRU CACHE (Leetcode 146)
=====================================================================================================================================
//Problem Link  =========> https://leetcode.com/problems/lru-cache/

=====================================================================================================================================

//Problem Statement :

Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache.If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation:

LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
   

=====================================================================================================================================

//CODE —————> TC :  o(1) -- get , put  ;    SC : o(capacity)      // In general , no one ask tc and sc in LINKED LIST

class Node{
    int key;
    int value;
    Node next;
    Node prev;
    public Node(int key, int value){
        this.key = key;
        this.value = value;
    }
}

class LRUCache {
    int capacity;
    Node head = new Node(0,0);
    Node tail = new Node(0,0);
    HashMap<Integer, Node>hm = new HashMap<>();

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(hm.containsKey(key)){        
            Node nn = hm.get(key); // nn is NewNode
            remove(nn);
            insert_AfterHead(nn);
            return nn.value;
        }
        else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
          if(hm.containsKey(key)){
            Node nn = hm.get(key);
            remove(nn);
        }
        
        if(hm.size() == capacity){
            Node tailPrev = tail.prev;
            remove(tailPrev);
        }

        Node nn = new Node(key, value);
        insert_AfterHead(nn);


    }

    public void remove(Node nn){
        hm.remove(nn.key, nn);
        nn.next.prev = nn.prev;
        nn.prev.next = nn.next;
    }

    public void insert_AfterHead(Node nn){
        hm.put(nn.key, nn);

        Node headNxt  = head.next;
        head.next = nn;
        nn.next = headNxt;

        headNxt.prev = nn;
        nn.prev = head;
    }
}

=====================================================================================================================================
