Majority Element(Leetcode 169)
=====================================================================================================================================
//Problem Link  =========> https://leetcode.com/problems/majority-element/description/

=====================================================================================================================================

//Problem Statement :

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
 
Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
   
=====================================================================================================================================

//CODE —————> TC :  o(N*logN) + o(N);    SC : o(N)           // Sc : o(N) because of HashMap


class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++){
            if(!hm.containsKey(nums[i])){
                hm.put(nums[i], 1);
            }
            else{
                int count = hm.get(nums[i]);
                hm.put(nums[i], count+1);
            }
        }

        int ans =0;
        for(int i = 0; i < nums.length; i++){
            if(hm.get(nums[i]) > nums.length/2){
                ans = nums[i];
                break;
            }
        }

        return ans;
        
         
    }
}


=====================================================================================================================================
//USED Moore's Algo

//CODE —————> TC :  o(N);    SC : o(N)    

class Solution {
    public int majorityElement(int[] nums) {
        int ele = nums[0];
        int cnt = 0;

        for(int i  = 0; i < nums.length; i++){
           
            if(cnt == 0){
                ele = nums[i];
                cnt = 1;
            }
            else if(nums[i] == ele){
                cnt++;
            }
            else{
                cnt--;
            }
        }


        int ans = 0;

        for(int i =0 ; i < nums.length; i++){
            if(ele == nums[i]){
                ans++;
            }
            
        }
        if(ans > nums.length/2){
           return ele;     
        }


        return -1;
    }
}
