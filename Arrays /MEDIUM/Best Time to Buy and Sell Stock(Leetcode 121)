Best Time to Buy and Sell Stock - I(Leetcode 121)
=====================================================================================================================================

//Problem Link ----->  https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

=====================================================================================================================================


//Problem Statement :



You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.


Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5

Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:

Input: prices = [7,6,4,3,1]
Output: 0

Explanation: In this case, no transactions are done and the max profit = 0.


=====================================================================================================================================


//Code —————> TC :  o(N)  ;    SC : o(1)


class Solution {
    public int maxProfit(int[] prices) {
    
        //Qn  states can buy one and sell it on different day in future

        int n = prices.length;
        int mini = prices[0];
        int maxi = 0; //buy and sell on the same day will be 0 profit.
        
        if(n == 0){
            return maxi;
        }

        for(int i = 1 ; i < n ; i++){
            int cost = prices[i] - mini;

            //buy the stock in low cost (i.e current day cost -  minimum day cost ) which gives us some cost (more than the maxi or min)
            maxi = Math.max(maxi, cost);

            mini = Math.min(mini, prices[i]); // in future , it may be possible of the stock will be less so keep tarcking mini
        }


        return maxi;
        
    }
}
