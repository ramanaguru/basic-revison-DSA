Find the Duplicate Number(Leetcode 287)
=====================================================================================================================================
//Problem Link  =========> https://leetcode.com/problems/find-the-duplicate-number/description/

=====================================================================================================================================

//Problem Statement :

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

=====================================================================================================================================

//CODE —————> TC :  o(N+ Nlog N)  ;    SC : o(1)

Method - 1 : Sorting and check in array

class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        for(int i = 0; i < n-1; i++){
            if(nums[i] == nums[i+1]){
                return nums[i];
            }
        }

        return 0;
    }
}

=====================================================================================================================================

//Methd - 2 : tortoise and Hare approach OR slow and Fast approach


TC :  o(N)  ;    SC : o(1)


// In this method we are maintaining two pointer slow & Fast , 
// We are increasing slow by 1 & fast by 2. 
// when both slow & fast points the same index number,
// then we assign the slow at the index beginning & fast remains at his position ,
// then we again start slow & fast both increasing by 1.
// Now at which position they both meet is the duplicate number.



class Solution {
    public int findDuplicate(int[] nums) {
       int slow = 0;
       int fast = 0;
        do{
           slow = nums[slow];
           fast = nums[nums[fast]];
        } while(slow!=fast);

        slow = 0;

        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }   

        return slow;
    }
}



=====================================================================================================================================
