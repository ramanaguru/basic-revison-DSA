Unique Paths(Leetcde 62)

Problem Link -----> https://leetcode.com/problems/unique-paths/description/

Problem Description :

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

------------------------------------------------------------------------------------------------------------
Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

------------------------------------------------------------------------------------------------------------

Code
//Memoisation 

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int uniquePaths(int n, int m) {
		
		int dp[][] = new int[n+1][m+1];

		for(int row[]: dp){
			Arrays.fill(row, -1);
		}

		return f(n-1, m-1, dp);
	}

	public static int f(int i , int j , int dp[][]){
	    if(i < 0 || j < 0){
			return 0;
		}

		if(i == 0 || j ==0) return 1;

		if(dp[i][j] != -1) return dp[i][j];

		int left = f(i,j-1 , dp);
		int up = f(i-1, j, dp);

		return dp[i][j] = up + left;

		
	}
}



//Tabulation
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] =  new int[m][n];
        dp[0][0] = 1;
        for(int i =0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 && j == 0){
                    continue;
                }
                int up = 0;
                int left = 0;

                if(i > 0){
                    up = dp[i-1][j];
                }
                if(j > 0){
                    left = dp[i][j-1];
                }

                dp[i][j] = up + left;
            }
        }

        return dp[m-1][n-1];
    }
}



//Tabulation with better runtime


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		return findCount(m, n);
	}

	public static int findCount(int m, int n){
        int[][] dp = new int[m][n];

        for(int i = 0; i < m; i++){
            dp[i][0] = 1;
        }

        for(int i = 0; i < n; i++){
            dp[0][i] = 1;
        }

        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }

        return dp[m-1][n-1];
    }
}
