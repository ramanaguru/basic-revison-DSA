3 SUM (Leetcode - 15)
=====================================================================================================================================
//Problem Link  =========>  https://leetcode.com/problems/3sum/description/

=====================================================================================================================================

//Problem Statement :

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.

The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.


Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


=====================================================================================================================================

//CODE —————> TC :  O(N^2)  ;    SC :  O(3*k)  ; k is the no.of triplets



class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        Arrays.sort(nums);               // Dont forget to sort first otherwise it will give you error
        
        int n = nums.length;
         
        List<List<Integer>> ans = new ArrayList<>();
        
        if(n  < 3) return ans;

        for(int i = 0; i < n ; i++){
            if( i > 0 && nums[i] == nums[i-1]) continue;
            
            int  j = i + 1;
            int k = n-1;
            
            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];

                if(sum < 0){
                    j++;
                }
                else if(sum > 0){
                    k--;
                }
                else{
                    ans.add(Arrays.asList(nums[i],nums[j],nums[k]));
                    while(j < k && nums[j] == nums[j+1]) j++;
                    while(j < k && nums[k] == nums[k-1]) k--;

                    j++;
                    k--;
                }

            }

        }

        return ans;

    }
}

=====================================================================================================================================
