Missing Number(LeetCode 268)
=====================================================================================================================================
//Problem Link  =========>. https://leetcode.com/problems/missing-number/description/

=====================================================================================================================================

//Problem Statement :
  
  Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:

Input: nums = [3,0,1]
Output: 2

Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2

Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8

Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
   

=====================================================================================================================================

//CODE —————> TC :  o(N * N)  ;    SC : o(1)

class Solution {
    public int missingNumber(int[] nums) {
       int n  = nums.length;

       for(int i = 1; i <= n; i++){
           int flag = 0;
           for(int j = 0; j < n; j++){
               if(nums[j] == i){
                   flag = 1;
                   break;
               }
           }
           if(flag ==  0){
               return i;
           }
       }
       return 0;
    }
}



 TC :  o(N)  ;    SC : o(N)
class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        HashSet<Integer>hs = new HashSet<Integer>();

        for(int i = 0; i < n; i++){
            hs.add(nums[i]);
        }

        for(int i = 0; i <= n; i++){
            if(!hs.contains(i)){
                return i;
            }
        }
        return -1;
       
    }
}


 TC :  o(N)  ;    SC : o(1)
class Solution {
    public int missingNumber(int[] nums) {
        //Test  case:    nums = [1,2,3,4]
        int N = nums.length;
        int ans =0;

        for(int val : nums){
            ans ^= val;       // 1 ^ 2 ^ 3 ^ 4
        }

        for(int i =0; i <= N; i++){
            ans ^= i;        //  1 ^ 2 ^ 3 ^ 4    ^=  0 ^ 1 ^ 2 ^ 3 ^ 4
        }
        

        return ans;      // ans = 0;
    }
}    



=====================================================================================================================================





