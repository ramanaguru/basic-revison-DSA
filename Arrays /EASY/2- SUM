2- SUM
=====================================================================================================================================
//Problem Link    =========> https://leetcode.com/problems/two-sum/
  CodeStudio      =========> https://www.codingninjas.com/codestudio/problems/reading_6845742

=====================================================================================================================================

//Problem Statement :

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.



Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
  
   

=====================================================================================================================================

//CODE —————> TC :  O(N) + O(N*logN), where N = size of the array , logN  for sorting ;    SC : o(1)

//Code for CodeStudio


import java.util.*;

public class Solution {
    public static String read(int n, int []book, int target){

        
        Arrays.sort(book);
        int i = 0;
        int j = n-1;
        while(i <= j){
            int sum = book[i] + book[j];

            if(sum == target){
                return "YES";
            }           
            else if(sum < target){
                i++;
            }
            else{
                j--;
            }
        }

        return "NO";
    }
}



//Code for LEETCODE
//CODE —————> TC :  o(N)  ;    SC : o(N)     //SC why N beacuse in hashmap we are storing

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer , Integer > hm = new HashMap ();

        for(int i = 0 ; i < nums.length; i++){
            int num = nums[i];
            int needMore = target - num;
            if(hm.containsKey(needMore)){
                return new int[]{hm.get(needMore), i};
            }
            else{
                hm.put(num, i);
            }
        }

        return null;
        
        

     
    }
}


=====================================================================================================================================
