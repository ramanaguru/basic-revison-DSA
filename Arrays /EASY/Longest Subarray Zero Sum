Longest Subarray Zero Sum (Coding Ninjas)
=====================================================================================================================================
//Problem Link  =========>   https://www.codingninjas.com/codestudio/problems/920321

=====================================================================================================================================

//Problem Statement :

Given an array containing both positive and negative integers, we have to find the length of the longest subarray with the sum of all elements equal to zero.

Example 1:

Input Format: N = 6, array[] = {9, -3, 3, -1, 6, -5}
Result: 5

Explanation: The following subarrays sum to zero:
{-3, 3} , {-1, 6, -5}, {-3, 3, -1, 6, -5}
Since we require the length of the longest subarray, our answer is 5!


Example 2:
Input Format: N = 8, array[] = {6, -2, 2, -8, 1, 7, 4, -10}
Result: 8

Subarrays with sum 0 : {-2, 2}, {-8, 1, 7}, {-2, 2, -8, 1, 7}, {6, -2, 2, -8, 1, 7, 4, -10}
Length of longest subarray = 8


Example 3:
Input Format: N = 3, array[] = {1, 0, -5}
Result: 1

Subarray : {0}
Length of longest subarray = 1


=====================================================================================================================================

//CODE —————> TC :  o(N)  ;    SC : o(N)



public class Solution {
	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {

		int size = arr.size();

		HashMap<Integer, Integer> hm = new HashMap<>();

		int sum = 0;
		int maxi = 0;


		for(int i = 0; i < size; i++){
			sum += arr.get(i);
			if(sum == 0){
				maxi = i + 1;
			}
			else{
				if(hm.containsKey(sum) ){
					maxi = Math.max(maxi, i - hm.get(sum) );
				}
				else{
					hm.put(sum , i);
				}
			}
		}


		return maxi;
	}
}


=====================================================================================================================================
