Remove Duplicates from Sorted Array(Leetcode- 26)

=====================================================================================================================================
//Problem Link  =========> https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/

=====================================================================================================================================
//Problem Statement :

Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same.
If there are k elements after removing the duplicates, then the first k elements of the array should hold the final result. It does not matter what you leave beyond the first k elements.
Note: Return k after placing the final result in the first k slots of the array.
   
Example 1: 

Input: arr[1,1,2,2,2,3,3]
Output: arr[1,2,3,_,_,_,_]

Explanation: Total number of unique elements are 3, i.e[1,2,3] and Therefore return 3 after assigning [1,2,3] in the beginning of the array.

Example 2: 

Input: arr[1,1,1,2,2,3,3,3,3,4,4]
Output: arr[1,2,3,4,_,_,_,_,_,_,_]

Explanation: Total number of unique elements are 4, i.e[1,2,3,4] and Therefore return 4 after assigning [1,2,3,4] in the beginning of the array.

=====================================================================================================================================

//CODE —————> TC :  O(n*log(n))+O(n) ;    SC : o(n)

Method - 1 :Used Hashset

class Solution {
    public int removeDuplicates(int[] nums) {
        HashSet<Integer>hs = new HashSet<>();
        int k = 0;
        for(int i =0 ; i < nums.length; i++){
            if(!hs.contains(nums[i])){
                nums[k] = nums[i];
                k++;
                hs.add(nums[i]);
            }
            
        }


        return k ;
    }
}

==============================================================================================================================================

Method - 2 : Two Pointers Approach

//CODE —————> TC :  O(n) ;    SC : o(1)

class Solution {
    public int removeDuplicates(int[] nums) {
        int i =0;
        
        for(int j = 1; j < nums.length; j++){
            if(nums[i] != nums[j]){
                i++;
                nums[i] = nums[j];
            }
        }
        return i+1;
    }
}


==============================================================================================================================================
What if they ask you in ArrayList to solve (SAME  AS METHOD- 2) 


import java.util.ArrayList; // Initial this first
public static int removeDuplicates(ArrayList<Integer> arr,int n) {

		int i = 0;
		for(int j =1; j <= n-1; j++){
			if(!arr.get(j).equals(arr.get(j - 1))){                         // arr.get(j) != arr.get(i) =======>  In Hard case fail , so use .equals 
				i++;
				arr.set(i, arr.get(j));
			}
		}

		return i+1;
	}


=====================================================================================================================================
