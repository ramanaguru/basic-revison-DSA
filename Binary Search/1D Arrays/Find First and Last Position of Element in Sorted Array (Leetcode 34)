Find First and Last Position of Element in Sorted Array (Leetcode 34)
=====================================================================================================================================
//Problem Link  =========>    https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

=====================================================================================================================================

//Problem Statement :
  
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

 

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

=====================================================================================================================================

//CODE —————> TC :  o(logN)  ;    SC : o(1) // we are taking ans[] but output they ask us to return in array output so  o(1)


class Solution {
    
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int ans[] = new int[2];
        ans[0]  = firstPos(nums, target, n);
        ans[1]  = lastPos(nums, target, n);

        return ans;
    }
    public int firstPos(int nums[], int x, int n){
        int low = 0;
        int high = n-1;
        int ans = -1;

        while(low <= high){
            int mid = (low + high)/2;

            if(nums[mid] == x){
                ans = mid;
                high = mid -1;
            }
            else if(nums[mid] < x){
                low = mid+1;
            }
            else{
                high = mid - 1;
            }

        }

        return ans;
    }

      public int lastPos(int nums[], int x, int n){
        int low = 0;
        int high = n-1;
        int ans = -1;

        while(low <= high){
            int mid = (low + high)/2;

            if(nums[mid] == x){
                ans = mid;
                low = mid+1;
            }
            else if(nums[mid] < x){
                low = mid +1;
            }
            else{
                high = mid - 1;
            }

        }

        return ans;
    }
}


=====================================================================================================================================
