Search in Rotated Sorted Array II (Leetcode 81)
=====================================================================================================================================
//Problem Link  =========>   https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/

=====================================================================================================================================

//Problem Statement :
  
   
Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
You must decrease the overall operation steps as much as possible.

Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

=====================================================================================================================================

//CODE —————> TC :  o(logN)  ;    SC : o(1)

class Solution {
    public boolean search(int[] nums, int target) {
    
        int n = nums.length;
        int low = 0;
        int high = n-1;

        while(low <= high){
            
            int mid = (low + high)/2;
            if(nums[mid] == target) return true;

            if(nums[low] == nums[mid] && nums[mid] == nums[high]){
                low++;
                high--;
                continue;
            }
            
            //Left sort
            if(nums[low] <= nums[mid]){
                if(nums[low] <= target && target <= nums[mid]){
                    high = mid -1;
                }
                else{
                    low = mid+1;
                }
            }
            
            //Right wsort
            else{
                if(nums[mid] <= target && target <= nums[high]){
                    low = mid + 1;
                }
                else{
                    high = mid -1;
                }
            }
        }

        return false;
        
    }
}


=====================================================================================================================================
