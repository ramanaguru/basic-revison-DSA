K-th Element of two sorted arrays
=====================================================================================================================================
** Pre - re1 : Go back and do try median of two sorted arrays **
=====================================================================================================================================
Problem Link : https://www.codingninjas.com/studio/problems/k-th-element-of-2-sorted-array_1164159
=====================================================================================================================================

Problem Statement: Given two sorted arrays of size m and n respectively, you are tasked with finding the element that would be at the kth position of the final sorted array.

Examples :

Input: m = 5
       n = 4
       array1 = [2,3,6,7,9]
       array2 = [1,4,8,10]
       k = 5

Output:
 6

Explanation: Merging both arrays and sorted. Final array will be -
 [1,2,3,4,6,7,8,9,10]
We can see at k = 5 in the final array has 6. 


Input:
 m = 1
       n = 4
       array1 = [0]
       array2 = [1,4,8,10]
       k = 2

Output:
 4

Explanation:
 Merging both arrays and sorted. Final array will be -
 [1,4,8,10]

We can see at k = 2 in the final array has 4
=====================================================================================================================================

//Code 

Tc : O(log(min(m,n)))  ;  Sc : O(1)

class Solution {
	int getKthElement(int[] a, int[] b, int k) {
		
		
	  int n1 = a.length , n2 = b.length;
		if(n1 > n2){
			return getKthElement(b , a , k);
		}
		
		int low = Math.max(0, k -n2);
		int high =Math.min(k , n1);
		
		int n = (n1 + n2);
		
		while(low <= high){
			int mid1 = (low + high)/2;
			int mid2 = k - mid1;
			
			int l1 = (mid1 == 0) ? Integer.MIN_VALUE : a[mid1-1];
			int l2 = (mid2 == 0) ? Integer.MIN_VALUE : b[mid1-1];
			int r1 = (mid1 == n1)? Integer.MAX_VALUE : a[mid1];
			int r2 = (mid2 == n2)? Integer.MAX_VALUE : b[mid2];
			
			if(l1 <= r2 && l2 <= r1){
				return Math.max(l1, l2);
			}
			else if(l1 > r2){
				high = mid1 -1;
			}else{
				low = mid1 + 1;
			}
		}
		
		return -1;
	}
}
=====================================================================================================================================
